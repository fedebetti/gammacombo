#include <ParameterCache.h>

#include <Combiner.h>
#include <MethodAbsScan.h>
#include <OptParser.h>
#include <RooSlimFitResult.h>

#include <RooRealVar.h>
#include <RooWorkspace.h>

#include <TH1F.h>
#include <TH2F.h>
#include <TString.h>

#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>

#include <cassert>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <map>
#include <string>
#include <utility>
#include <vector>

///
/// Constructor.
///
/// \param arg - command line options
///
ParameterCache::ParameterCache(OptParser* arg) {
  assert(arg);
  m_arg = arg;
}

void ParameterCache::printFitResultToOutStream(std::ofstream& out, RooSlimFitResult* slimFitRes) {

  out << "### FCN: " << slimFitRes->minNll() << ", EDM: " << slimFitRes->edm() << std::endl;
  out << "### COV quality: " << slimFitRes->covQual() << ", status: " << slimFitRes->status()
      << ", confirmed: " << (slimFitRes->isConfirmed() ? "yes" : "no") << std::endl;
  RooArgList argList = slimFitRes->floatParsFinal();
  argList.add(slimFitRes->constPars());
  argList.sort();
  for (const auto& argAbs : argList) {
    const auto arg = static_cast<RooRealVar*>(argAbs);
    if (TString(arg->GetName()).Contains("obs")) continue;
    out << Form("%-25s", arg->GetName()) << " " << Form("%12.6f", arg->getVal()) << " "
        << Form("%12.6f", arg->getErrorLo()) << " " << Form("%12.6f", arg->getErrorHi()) << std::endl;
  }
}

void ParameterCache::cacheParameters(MethodAbsScan* scanner, TString fileName) {

  int totalCachedPoints = 0;

  // cache default solutions
  //
  if (m_arg->debug) std::cout << "ParameterCache::cacheParameters() : ";
  std::cout << "saving parameters to: " << fileName << std::endl;

  std::ofstream outfile;
  outfile.open(fileName);

  std::vector<RooSlimFitResult*> solutions = scanner->getSolutions();

  outfile << "##### auto-generated by ParameterCache ####### " << std::endl;
  TDatime d;
  outfile << "##### printed on " << d.AsString() << " ######" << std::endl;
  outfile << Form("%-25s", "# ParameterName") << " " << Form("%12s", "value") << " " << Form("%12s", "errLow") << " "
          << Form("%12s", "errHigh") << std::endl;

  for (unsigned int i = 0; i < solutions.size(); i++) {

    outfile << std::endl;
    outfile << "----- SOLUTION " << totalCachedPoints << " -----" << std::endl;

    RooSlimFitResult* slimFitRes = solutions[i];
    printFitResultToOutStream(outfile, slimFitRes);
    totalCachedPoints++;
  }
  if (m_arg->debug)
    std::cout << "ParameterCache::cacheParameters() : cached " << solutions.size() << " solutions" << std::endl;

  // cache also any specifically requested points
  //
  // 1D
  if (m_arg->savenuisances1d.size() > 0) {
    const auto& points = m_arg->savenuisances1d;
    for (int i = 0; i < points.size(); i++) {

      int iBin = scanner->getHCL()->FindBin(points[i]);
      RooSlimFitResult* r = scanner->curveResults[iBin - 1];
      if (!r) {
        std::cout << "ParameterCache::cacheParameters() : ERROR : no fit result at this scan point!" << std::endl;
        return;
      }
      outfile << std::endl;
      outfile << "----- SOLUTION " << totalCachedPoints << " (--sn at " << scanner->getScanVar1Name() << " = "
              << Form("%10.5f", points[i]) << ") -----" << std::endl;
      printFitResultToOutStream(outfile, r);
      totalCachedPoints++;
    }
    if (m_arg->debug)
      std::cout << "ParameterCache::cacheParameters() : cached " << totalCachedPoints - solutions.size()
                << " further points" << std::endl;
  }
  // 2D
  if (m_arg->savenuisances2dx.size() > 0) {
    const auto& pointsx = m_arg->savenuisances2dx;
    const auto& pointsy = m_arg->savenuisances2dy;

    if (pointsx.size() != pointsy.size()) {
      std::cout << "ParameterCache::cacheParameters() : ERROR : vectors for savenuisances2dx(y) have different size"
                << std::endl;
      return;
    }

    for (int i = 0; i < pointsx.size(); i++) {
      int xBin = scanner->getHCL2d()->GetXaxis()->FindBin(pointsx[i]);
      int yBin = scanner->getHCL2d()->GetYaxis()->FindBin(pointsy[i]);
      if (xBin < 1 || xBin > scanner->getNPoints2dx() || yBin < 1 || yBin > scanner->getNPoints2dy()) {
        std::cout << "ParameterCache::cacheParameters() : ERROR : specified point is out of scan range." << std::endl;
        continue;
      }

      RooSlimFitResult* r = scanner->curveResults2d[xBin - 1][yBin - 1];
      if (!r) {
        std::cout << "ParameterCache::cacheParameters() : ERROR : no fit result at this scan point!" << std::endl;
        return;
      }
      outfile << std::endl;
      outfile << "----- SOLUTION " << totalCachedPoints << " (not glob min just min at " << scanner->getScanVar1Name()
              << " = " << pointsx[i] << " , " << scanner->getScanVar2Name() << " = " << pointsy[i] << " -----"
              << std::endl;
      printFitResultToOutStream(outfile, r);
      totalCachedPoints++;
    }
    if (m_arg->debug)
      std::cout << "ParameterCache::cacheParameters() : cached " << totalCachedPoints - solutions.size()
                << " further points" << std::endl;
  }
  outfile.close();
}

///
/// Load starting values from a file.
///
/// \param fileName - Load the parameters from a file with this name.
/// \return - true, if a file was loaded
///
bool ParameterCache::loadPoints(TString fileName) {

  bool successfullyLoaded = false;
  startingValues.clear();

  std::ifstream infile(fileName.Data());
  if (infile) {  // file exists
    if (m_arg->debug)
      std::cout << "ParameterCache::loadPoints() -- loading parameters from file " << fileName << std::endl;
    std::string line;
    if (infile.is_open()) {
      int nSolutions = 0;
      while (getline(infile, line)) {
        if (line.empty())
          continue;  // blank line
        else if (boost::starts_with(line, "#"))
          continue;                                   // these are comments
        else if (boost::starts_with(line, "----")) {  // solution here
          nSolutions++;
          startingValues.push_back(std::map<TString, double>());
        } else {
          std::vector<std::string> els;
          boost::split(els, line, boost::is_any_of(" "), boost::token_compress_on);
          TString name = els[0];
          double val = boost::lexical_cast<double>(els[1]);
          startingValues[nSolutions - 1].insert(std::make_pair(name, val));
        }
      }
    }
    m_parametersLoaded = true;
    successfullyLoaded = true;
    if (m_arg->debug) printPoint();
  } else {
    std::cout << "ParameterCache::loadPoints() : ERROR : file not found: " << fileName << std::endl;
  }
  return successfullyLoaded;
}

void ParameterCache::printPoint() {

  std::cout << "ParameterCache::printPoint() -- There are " << startingValues.size()
            << " solutions with values: " << std::endl;

  for (unsigned int i = 0; i < startingValues.size(); i++) {
    std::cout << "SOLUTION " << i << std::endl;
    for (std::map<TString, double>::iterator it = startingValues[i].begin(); it != startingValues[i].end(); it++) {
      std::cout << Form("%-25s", it->first.Data()) << " " << Form("%12.6f", it->second) << std::endl;
    }
  }
}

int ParameterCache::getNPoints() { return startingValues.size(); }

std::vector<TString> ParameterCache::getFixedNames(std::vector<Utils::FixPar> fixPar) {
  std::vector<TString> names;
  for (unsigned int i = 0; i < fixPar.size(); i++) { names.push_back(fixPar[i].name); }
  return names;
}

void ParameterCache::setPoint(MethodAbsScan* scanner, int i) { setPoint(scanner->getCombiner(), i); }

void ParameterCache::setPoint(Combiner* cmb, int i) {
  if (!m_parametersLoaded) {
    std::cout << "ParameterCache::setPoint() : ERROR : Can't set starting "
                 "point as no starting values have been loaded"
              << std::endl;
    std::exit(1);
  }
  if (i >= getNPoints()) {
    if (m_arg->debug) std::cout << "ParameterCache::setPoint() : ";
    std::cout << "  ERROR : parameter point number " << i + 1 << " not found in file. Exit." << std::endl;
    std::exit(1);
  }
  std::vector<TString> fixNames = getFixedNames(cmb->getConstVars());

  RooWorkspace* w = cmb->getWorkspace();
  if (m_arg->debug)
    std::cout << "ParameterCache::setPoint() : Setting parameter values for point " << i + 1 << std::endl;

  for (std::map<TString, double>::iterator it = startingValues[i].begin(); it != startingValues[i].end(); it++) {
    TString name = it->first;
    double val = it->second;
    if (find(fixNames.begin(), fixNames.end(), name) != fixNames.end()) {
      if (m_arg->debug)
        std::cout << "\tLeft " << Form("%-15s", name.Data()) << " = " << Form("%12.6f", w->var(name)->getVal())
                  << " constant" << std::endl;
      continue;
    }
    if (w->var(name)) {
      w->var(name)->setVal(val);
      if (m_arg->debug)
        std::cout << "\tSet  " << Form("%-15s", name.Data()) << " = " << Form("%12.6f", w->var(name)->getVal())
                  << std::endl;
    }
  }
}
